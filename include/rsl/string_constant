#pragma once

namespace rsl {
template <std::size_t N>
struct string_constant {
  constexpr static auto size = N;

  consteval string_constant() = default;
  consteval explicit(false) string_constant(const char (&str)[N + 1]) noexcept {
    auto idx = std::size_t{0};
    for (char const chr : str) {
      data[idx++] = chr;
    }
  }
  consteval explicit string_constant(std::same_as<char> auto... Vs) : data{Vs...} {}
  consteval explicit string_constant(std::string_view str) { str.copy(data, N); }
  constexpr explicit(false) operator std::string_view() const { return std::string_view{data}; }

  char data[N + 1]{};
};

template <std::size_t N>
string_constant(char const (&)[N]) -> string_constant<N - 1>;
}  // namespace rsl