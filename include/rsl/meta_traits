#pragma once
#include <meta>

namespace rsl::meta {

template <typename T, std::meta::info Template>
concept is_specialization = has_template_arguments(^^T) && template_of(^^T) == (is_template(Template) ? Template : template_of(Template));

template <std::meta::info R>
concept is_function = std::meta::is_function(R);

template <std::meta::info R>
concept is_member_function = is_function<R> && is_class_member(R);

template <std::meta::info R>
concept is_static_member_function = is_member_function<R> && is_static_member(R);

template <std::meta::info R>
concept is_nonstatic_member_function = is_member_function<R> && !is_static_member(R);
}