#pragma once
#include <meta>
#include <type_traits>

#include <rsl/_impl/concepts.hpp>
#include <rsl/variant>

namespace rsl {
namespace _impl {
template <typename T>
concept is_enum = std::is_scoped_enum_v<T> || std::is_enum_v<T>;

template <typename T>
struct TypeTag {
  using type = T;
};

template <typename T>
using unwrap_type_tag = typename T::type;
}  // namespace _impl

template <typename T>
constexpr inline _impl::TypeTag<T> type{};

namespace _tagged_variant_impl {
template <_impl::is_enum T>
consteval std::span<T const> make_transitions() {
  std::vector<T> transitions;
  for (auto enumerator : enumerators_of(^^T)) {
    transitions.push_back(extract<T>(enumerator));
  }
  return define_static_array(transitions);
}

template <_impl::is_enum T>
consteval std::size_t find_inverse_transition(T value) {
  std::size_t index = 0;
  for (auto enumerator : enumerators_of(^^T)) {
    if (value == extract<T>(enumerator)) {
      return index;
    }
    ++index;
  }
  return -1ULL;
}

template <auto V>
constexpr inline auto inverse_transition = find_inverse_transition(V);

template <_impl::is_enum E>
constexpr static auto transitions = _tagged_variant_impl::make_transitions<E>();

template <_impl::is_enum E>
consteval std::meta::info make_storage() {
  union Storage;
  consteval {
    std::size_t idx = 0;
    auto members    = std::vector{data_member_spec(^^char)};

    for (auto enumerator : enumerators_of(^^E)) {
      auto annotations     = annotations_of(enumerator);
      auto annotation_type = type_of(annotations[0]);
      auto alt_type        = dealias(substitute(^^_impl::unwrap_type_tag, {annotation_type}));
      members.push_back(data_member_spec(alt_type, {.name = identifier_of(enumerator)}));
    }
    define_aggregate(^^Storage, members);
  };
  return ^^Storage;
}

template <_impl::is_enum E>
using Storage = [:make_storage<E>():];
}  // namespace _tagged_variant_impl

template <typename E>
struct tagged_variant : public _variant_impl::variant_base<_tagged_variant_impl::Storage<E>> {
  using storage_type = _tagged_variant_impl::Storage<E>;
  using base         = _variant_impl::variant_base<storage_type>;

public:
  using _variant_impl::variant_base<storage_type>::variant_base;
  constexpr tagged_variant(tagged_variant const&)            = default;
  constexpr tagged_variant(tagged_variant&&)                 = default;
  constexpr tagged_variant& operator=(tagged_variant const&) = default;
  constexpr tagged_variant& operator=(tagged_variant&&)      = default;
  constexpr ~tagged_variant()                                = default;

  using tags = E;

  storage_type* operator->() { return &this->storage; }
  storage_type* operator->() const { return &this->storage; }
  storage_type const* operator*() { return &this->storage; }
  storage_type const* operator*() const { return &this->storage; }

  explicit(false) operator E() const { return _tagged_variant_impl::transitions<E>[this->index()]; }

  using base::emplace;
  using base::get;
  using base::get_alt;  // TODO hide
  using base::index;
  using base::swap;
  using base::valueless_by_exception;

  template <typename Self, typename V>
  constexpr decltype(auto) visit(this Self&& self, V&& visitor) {
    return rsl::visit(std::forward<V>(visitor), std::forward<Self>(self));
  }
};

template <_impl::is_enum E>
constexpr E get_tag(tagged_variant<E> const& variant_) {
  return _tagged_variant_impl::transitions<E>[variant_.index()];
}

template <auto E>
  requires(_impl::is_enum<decltype(E)>)
constexpr bool holds_alternative(tagged_variant<decltype(E)> const& variant_) noexcept {
  return _tagged_variant_impl::transitions<decltype(E)>[variant_.index()] == E;
}

template <auto E, _variant_impl::has_get V>
  requires(_impl::is_enum<decltype(E)> &&
           std::same_as<rsl::tagged_variant<decltype(E)>, std::remove_cvref_t<V>>)
constexpr decltype(auto) get(V&& variant_) {
  // TODO underconstrained
  return rsl::get<_tagged_variant_impl::inverse_transition<E>>(std::forward<V>(variant_));
}

template <auto E>
  requires(_impl::is_enum<decltype(E)>)
constexpr auto* get_if(tagged_variant<decltype(E)>* variant_) noexcept {
  return rsl::get_if<_tagged_variant_impl::inverse_transition<E>>(variant_);
}

namespace _impl {

template <typename E>
concept all_alts_hashable = std::ranges::all_of(
    rsl::tagged_variant<E>::alternatives,
    std::ranges::transform([](auto R) { return extract<bool>(substitute(^^is_hashable, {R})); }));

template <typename E>
concept all_alts_noexcept_hashable =
    std::ranges::all_of(rsl::tagged_variant<E>::alternatives, std::ranges::transform([](auto R) {
                          return extract<bool>(
                              substitute(^^std::is_nothrow_invocable_v,
                                         {substitute(^^std::hash, remove_const(R))}));
                        }));
}  // namespace _impl
}  // namespace rsl

template <typename E>
  requires(rsl::_impl::all_alts_hashable<E>)
struct std::hash<rsl::tagged_variant<E>> {
  using result_type = std::size_t;

  std::size_t operator()(rsl::tagged_variant<E> const& obj) const
      noexcept(rsl::_impl::all_alts_noexcept_hashable<E>) {
    if (obj.valueless_by_exception()) {
      constexpr static std::size_t valueless_hash = 0x22c08c8cbcae8fc4;
      return valueless_hash;
    }
    return obj.index() + rsl::visit(
                             []<typename T>(T const& value) {
                               return std::hash<std::remove_cvref_t<T>>{}(value);
                             },
                             obj);
  }
};