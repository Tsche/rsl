#pragma once
#include <cstddef>
#include <concepts>
#include <type_traits>
#include <utility>
#include <memory>

#include <meta>

#include <rsl/_impl/concepts.hpp>
#include <rsl/util/to_string.hpp>
#include <rsl/_impl/member_cache.hpp>
#include <rsl/_impl/index_of.hpp>

#include <rsl/_impl/variant.hpp>

namespace rsl {

template <std::size_t, typename>
struct variant_alternative;

template <typename>
struct variant_size;

inline constexpr std::size_t variant_npos = _variant_impl::variant_npos;

using bad_variant_access = _variant_impl::bad_variant_access;

namespace _impl {
template <typename... Ts>
consteval std::meta::info make_storage() {
  union Storage;
  consteval {
    std::size_t idx = 0;
    define_aggregate(^^Storage,
                     {data_member_spec(^^char),
                    data_member_spec(^^Ts)...
                    });
  };
  return ^^Storage;
}

template <typename... Ts>
using Storage = [:make_storage<Ts...>():];
}  // namespace _impl

template <typename... Ts>
class variant
    : public _variant_impl::variant_base<_impl::Storage<Ts...>> {
  static_assert(sizeof...(Ts) > 0, "variant must contain at least one alternative");
  static_assert((!std::is_reference_v<Ts> && ...), "variant must not have reference alternatives");
  static_assert((!std::is_void_v<Ts> && ...), "variant must not have void alternatives");
  using storage_type = _impl::Storage<Ts...>;
  using base         = _variant_impl::variant_base<storage_type>;

public:
  using _variant_impl::variant_base<storage_type>::variant_base;
  constexpr variant(variant const&)            = default;
  constexpr variant(variant&&)                 = default;
  constexpr variant& operator=(variant const&) = default;
  constexpr variant& operator=(variant&&)      = default;
  constexpr ~variant()                         = default;

  using base::emplace;
  using base::get;
  using base::get_alt;  // TODO hide
  using base::index;
  using base::swap;
  using base::valueless_by_exception;

  template <typename Self, typename V>
  constexpr decltype(auto) visit(this Self&& self, V&& visitor) {
    return rsl::visit(std::forward<V>(visitor), std::forward<Self>(self));
  }
};

//? [variant.helper], variant helper classes
template <typename... Ts>
struct variant_size<variant<Ts...>> : std::integral_constant<std::size_t, sizeof...(Ts)> {};

template <typename... Ts>
struct variant_size<variant<Ts...> const> : std::integral_constant<std::size_t, sizeof...(Ts)> {};
template <std::size_t Idx, typename... Ts>
struct variant_alternative<Idx, variant<Ts...>> {
  static_assert(Idx < sizeof...(Ts), "variant_alternative index out of range");
  using type = Ts...[Idx];
};

template <std::size_t Idx, typename... Ts>
struct variant_alternative<Idx, variant<Ts...> const> {
  static_assert(Idx < sizeof...(Ts), "variant_alternative index out of range");
  using type = Ts...[Idx] const;
};

}  // namespace rsl

template <>
struct std::hash<rsl::monostate> {
  using result_type   = std::size_t;
  using argument_type = rsl::monostate;

  std::size_t operator()(const rsl::monostate&) const noexcept {
    constexpr static std::size_t monostate_hash = 0xb03c924ec92d7c6f;
    return monostate_hash;
  }
};

template <typename... Ts>
  requires(rsl::_impl::is_hashable<Ts> && ...)
struct std::hash<rsl::variant<Ts...>> {
  using result_type = std::size_t;

  std::size_t operator()(rsl::variant<Ts...> const& obj) const
      noexcept((std::is_nothrow_invocable_v<std::hash<std::remove_const_t<Ts>>, Ts const&> &&
                ...)) {
    if (obj.valueless_by_exception()) {
      constexpr static std::size_t valueless_hash = 0x22c08c8cbcae8fc4;
      return valueless_hash;
    }
    return obj.index() + rsl::visit(
                             []<typename T>(T const& value) {
                               return std::hash<std::remove_cvref_t<T>>{}(value);
                             },
                             obj);
  }
};